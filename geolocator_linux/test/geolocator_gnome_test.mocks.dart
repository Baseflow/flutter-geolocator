// Mocks generated by Mockito 5.1.0 from annotations
// in geolocator_linux/example/linux/flutter/ephemeral/.plugin_symlinks/geolocator_linux/test/geolocator_gnome_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dbus/dbus.dart' as _i4;
import 'package:geoclue/src/accuracy_level.dart' as _i2;
import 'package:geoclue/src/geoclue.dart' as _i3;
import 'package:gsettings/src/gsettings.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGeoClueAccuracyLevel_0 extends _i1.Fake
    implements _i2.GeoClueAccuracyLevel {}

class _FakeGeoClueClient_1 extends _i1.Fake implements _i3.GeoClueClient {}

class _FakeDBusValue_2 extends _i1.Fake implements _i4.DBusValue {}

/// A class which mocks [GeoClueManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoClueManager extends _i1.Mock implements _i3.GeoClueManager {
  MockGeoClueManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get inUse =>
      (super.noSuchMethod(Invocation.getter(#inUse), returnValue: false)
          as bool);
  @override
  _i2.GeoClueAccuracyLevel get availableAccuracyLevel => (super.noSuchMethod(
      Invocation.getter(#availableAccuracyLevel),
      returnValue: _FakeGeoClueAccuracyLevel_0()) as _i2.GeoClueAccuracyLevel);
  @override
  _i5.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
      Invocation.getter(#propertiesChanged),
      returnValue: Stream<List<String>>.empty()) as _i5.Stream<List<String>>);
  @override
  _i5.Future<void> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.GeoClueClient> getClient() => (super.noSuchMethod(
          Invocation.method(#getClient, []),
          returnValue: Future<_i3.GeoClueClient>.value(_FakeGeoClueClient_1()))
      as _i5.Future<_i3.GeoClueClient>);
  @override
  _i5.Future<_i3.GeoClueClient> createClient() => (super.noSuchMethod(
          Invocation.method(#createClient, []),
          returnValue: Future<_i3.GeoClueClient>.value(_FakeGeoClueClient_1()))
      as _i5.Future<_i3.GeoClueClient>);
  @override
  _i5.Future<void> deleteClient(_i3.GeoClueClient? client) =>
      (super.noSuchMethod(Invocation.method(#deleteClient, [client]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [GSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGSettings extends _i1.Mock implements _i6.GSettings {
  MockGSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get schemaName =>
      (super.noSuchMethod(Invocation.getter(#schemaName), returnValue: '')
          as String);
  @override
  _i5.Stream<List<String>> get keysChanged => (super.noSuchMethod(
      Invocation.getter(#keysChanged),
      returnValue: Stream<List<String>>.empty()) as _i5.Stream<List<String>>);
  @override
  _i5.Future<List<String>> list() =>
      (super.noSuchMethod(Invocation.method(#list, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Future<_i4.DBusValue> get(String? name) =>
      (super.noSuchMethod(Invocation.method(#get, [name]),
              returnValue: Future<_i4.DBusValue>.value(_FakeDBusValue_2()))
          as _i5.Future<_i4.DBusValue>);
  @override
  _i5.Future<_i4.DBusValue> getDefault(String? name) =>
      (super.noSuchMethod(Invocation.method(#getDefault, [name]),
              returnValue: Future<_i4.DBusValue>.value(_FakeDBusValue_2()))
          as _i5.Future<_i4.DBusValue>);
  @override
  _i5.Future<bool> isSet(String? name) =>
      (super.noSuchMethod(Invocation.method(#isSet, [name]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> set(String? name, _i4.DBusValue? value) =>
      (super.noSuchMethod(Invocation.method(#set, [name, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> unset(String? name) =>
      (super.noSuchMethod(Invocation.method(#unset, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setAll(Map<String, _i4.DBusValue?>? values) =>
      (super.noSuchMethod(Invocation.method(#setAll, [values]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
